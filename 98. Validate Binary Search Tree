98. Validate Binary Search Tree 
Total Accepted: 81324 Total Submissions: 393853 Difficulty: Medium
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
============
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if (root==null) return true;
        return dfs(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    
    public boolean dfs(TreeNode root, long low, long upper ) {
        if (root==null) return true;
        if (root.val<=low || root.val>=upper) return false;
        return dfs(root.left,low, root.val) && dfs(root.right, root.val, upper);
    }
}
===========
http://www.cnblogs.com/yuzhangcmu/p/4177047.html
