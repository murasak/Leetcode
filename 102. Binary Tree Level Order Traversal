102. Binary Tree Level Order Traversal
Total Accepted: 87662 Total Submissions: 278014 Difficulty: Easy
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
=======================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root==null) return result;
        
        // push TreeNode into Queue, cannot push NULL into queue.
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        
        while(!q.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int qSize = q.size();
            for (int i=0; i<qSize; i++) {
                TreeNode n = q.poll();  //queue: push to the tail, pop from the head.
                list.add(n.val);
                if (n.left!=null) q.offer(n.left);
                if (n.right!=null) q.offer(n.right);
            }
            result.add(list);
        }
        return result;
    }
}
