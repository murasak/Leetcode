101. Symmetric Tree
Total Accepted: 92409 Total Submissions: 278756 Difficulty: Easy
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
==================
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 Approach I: Recursion
 
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root==null) return true;
        return isCompare(root.left,root.right);
    }
    
    public boolean isCompare(TreeNode p1, TreeNode p2) {
        if (p1==null && p2==null) return true;
        if (p1==null || p2==null) return false;
        if (p1.val!=p2.val) return false;
        // left_branch.left == right_branch.right && left_branch.right == right_branch.left
        return (isCompare(p1.left,p2.right) && isCompare(p1.right,p2.left));
    }
}
================
Approach II: Iteration

public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root==null) return true;
        if (root.left==null && root.right==null) return true;
        if (root.left==null || root.right==null) return false;
        
        Queue<TreeNode> q1 = new LinkedList<TreeNode>();
        Queue<TreeNode> q2 = new LinkedList<TreeNode>();
        q1.offer(root.left);
        q2.offer(root.right);
        
        while (!q1.isEmpty() && !q2.isEmpty()) {
            TreeNode n1 = q1.poll();
            TreeNode n2 = q2.poll();
            if (n1.val!=n2.val) return false;
            if (n1.left==null && n2.right!=null || n1.left!=null && n2.right==null) return false;
            if (n1.right==null && n2.left!=null || n1.right!=null && n2.left==null) return false;
            if (n1.left!=null && n2.right!=null){
                q1.offer(n1.left);
                q2.offer(n2.right);
            }
            if (n1.right!=null && n2.left!=null) {
                q1.offer(n1.right);
                q2.offer(n2.left);
            }
        }
        return true;
    }
}
