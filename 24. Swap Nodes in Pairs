24. Swap Nodes in Pairs
Total Accepted: 81099 Total Submissions: 236371 Difficulty: Medium
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
==========
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(0);
        ListNode pred = dummy;
        
        ListNode curr = head;
        while (curr!=null && curr.next!=null) {
            ListNode after = curr.next;
            ListNode afterNext = after.next;
            after.next = curr;
            curr.next = afterNext;
            pred.next = after;
            pred = curr;
            curr = afterNext;
        }
        pred.next = curr;
        return dummy.next;
    }
}
