19. Remove Nth Node From End of List 
Total Accepted: 92624 Total Submissions: 324755 Difficulty: Easy
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
===========================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
 // solution processing 1ms from 2ms.
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head==null || n<1) return null;
        
        //delete the last node from the list.
        if (n==1) {   
            if (head.next==null) return null;  // list only has one node.
            ListNode pre = null;
            ListNode runner = head;
            while (runner.next!=null) {
                pre = runner;
                runner = runner.next;
            }
            pre.next = null;
            return head;
        }
        
        ListNode fast = head;
        ListNode slow = head;
        for (int i=0; i<n-1; ++i) {
            if (fast == null) return null;
            fast = fast.next;
        }
        
        // delete the first node from the list.
        if (fast.next==null){
            head = head.next;
            return head;
        }
        
        // find the nth node to the last.
        while (fast.next!=null) {
            fast = fast.next;
            slow = slow.next;
        }
            slow.val = slow.next.val;  // delete the middle node from the list.
            slow.next = slow.next.next;
      
        return head;
    }
}
