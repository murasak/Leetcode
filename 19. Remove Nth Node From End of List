19. Remove Nth Node From End of List 
Total Accepted: 92624 Total Submissions: 324755 Difficulty: Easy
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
===========================

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head==null || n<1) return null;
        if (head.next==null && n==1) return null;
        ListNode fast = head;
        ListNode slow = head;
        for (int i=0; i<n-1; ++i) {
            if (fast == null) return null;
            fast = fast.next;
        }
        
        ListNode preSlow = null;
        while (fast.next!=null) {
            fast = fast.next;
            preSlow = slow;
            slow = slow.next;
        }
        
        if (slow.next!=null) {
            slow.val = slow.next.val;
            slow.next = slow.next.next;
        } else {
            preSlow.next = null;
        }
        return head;
    }
}
