143. Reorder List
Total Accepted: 58658 Total Submissions: 264254 Difficulty: Medium
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You must do this in-place without altering the nodes' values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.
==============
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void reorderList(ListNode head) {
        if (head==null) return;
        ListNode l1=head;
        int len = 0;
        while (l1!=null) {
            l1 = l1.next;
            len++;
        }
        // split into two lists: front half and back half.
        l1=head;
        ListNode l2=head.next;
        for (int i=0; i<len/2-1; i++){
            l1 = l1.next;
            l2 = l2.next;
        }
        l1.next=null;
        
        // reverse the 2nd half list.
        l2=reverse(l2);
        l1=head;
        
        // link 1st half & 2nd half.
        while (l1.next!=null){
            ListNode next1=l1.next;
            ListNode next2=l2.next;
            l1.next=l2;
            l1 = next1;
            l2.next=l1;
            l2 = next2;
        }
        l1.next=l2;
       
    }
    
    public ListNode reverse(ListNode head) {
        ListNode root = null;
        while (head!=null){
            ListNode next = head.next;
            head.next = root;
            root = head;
            head = next;
        }
        return root;
    }
}
