Given a rotated sorted array, recover it to sorted array in-place.

Example
[4, 5, 1, 2, 3] -> [1, 2, 3, 4, 5]

Challenge
In-place, O(1) extra space and O(n) time.

Clarification
What is rotated array:

    - For example, the orginal array is [1,2,3,4], The rotated array of it can be 
    [1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]
=============
public class Solution {
    /**
     * @param nums: The rotated sorted array
     * @return: void
     */
    public void recoverRotatedSortedArray(ArrayList<Integer> nums) {
        if (nums == null || nums.size() <= 1) return;
        
        int i;
        for (i=0; i < nums.size()-1; i++) {
            if (nums.get(i) > nums.get(i+1)) break;
        }
        // rotate in place, use reverse 3 times.
        reverse(nums, 0, i);
        reverse(nums, i+1, nums.size()-1);
        reverse(nums, 0, nums.size()-1);
    }
    
    public void reverse(ArrayList<Integer> nums, int begin, int end) {
        while (begin < end) {
            int tmp = nums.get(begin);
            nums.set(begin,nums.get(end));
            nums.set(end,tmp);
            begin++;
            end--;
        }
    }
}
    
