Given an integer array, find a subarray with sum closest to zero.
Return the indexes of the first number and last number.

Example
Given [-3, 1, 1, -3, 5], return [0, 2], [1, 3], [1, 1], [2, 2] or [0, 4]

Challenge
O(nlogn) time
=========
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public int[] subarraySumClosest(int[] nums) {
        int[] res = {0,0};
        if (nums == null || nums.length == 0) return null;
        
        TreeMap<Long, Integer> mp = new TreeMap<Long, Integer>();
        long sum = 0;
        long minDiff = (long)Integer.MAX_VALUE+1;
        
        for (int i =0; i<nums.length; i++) {
            sum += nums[i];
            Map.Entry floorEntry = mp.floorEntry(sum);
            Map.Entry ceilingEntry = mp.ceilingEntry(sum);
            
            // if floorEntry or ceilingEntry exists.
            if (floorEntry != null || ceilingEntry != null) {
            
            // check ceilingEntry: the smallest or equal value greater than sum [e.g. (3,4,5) sum:4, then 4 or 5 is the ceiling]
                if (floorEntry == null || (ceilingEntry != null && Math.abs((long)floorEntry.getKey() - sum) > Math.abs((long)ceilingEntry.getKey() - sum))) {
                    if (Math.abs((long)ceilingEntry.getKey()-sum) < minDiff){
                        res[0] = (int)ceilingEntry.getValue() + 1;
                        res[1] = i;
                    }
            } else {
            // check floorEntry: the greatest or equal value smaller than sum [e.g. (3,4,5) sum:4, then 3, or 4 is the floor]
                if (Math.abs((long)floorEntry.getKey()-sum) < minDiff) {
                    res[0] = (int)floorEntry.getValue() +1;
                    res[1] = i;
                    minDiff = Math.abs((long)floorEntry.getKey() - sum);
                }
            }
        }
            
            mp.put(sum, i);
        }
        return res;
        
    }
}
