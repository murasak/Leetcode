226. Invert Binary Tree
Total Accepted: 66814 Total Submissions: 153887 Difficulty: Easy
Invert a binary tree.

     4
   /   \
  2     7
 / \   / \
1   3 6   9
to
     4
   /   \
  7     2
 / \   / \
9   6 3   1
===========
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 Approach I: Recursion
 
public class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root==null) return null;
        TreeNode tmp = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(tmp);
        return root;
    }
}
==============
Approach II: Iteration

public class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root==null) return null;
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        
        while(!q.isEmpty()){
            TreeNode n = q.poll();
            TreeNode temp = n.left;
            n.left = n.right;
            n.right = temp;
            if(n.left!=null) q.offer(n.left);
            if(n.right!=null) q.offer(n.right);
        }
        return root;
    }
}
