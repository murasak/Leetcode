107. Binary Tree Level Order Traversal II
Total Accepted: 68912 Total Submissions: 209134 Difficulty: Easy
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
===============

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 Approach I: Use a Stack
 
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root==null) return result;
        
        Deque<List<Integer>> stack = new ArrayDeque<List<Integer>>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.offer(root);
        
        while (!q.isEmpty()){
            List<Integer> list = new ArrayList<>();
            int qSize = q.size();
            for (int i=0; i<qSize; i++) {
                TreeNode n = q.poll();
                list.add(n.val);
                if (n.left!=null) q.offer(n.left);
                if (n.right!=null) q.offer(n.right);
            }
            stack.push(list);
        }
        
        while (!stack.isEmpty()) {   // Instead of using Stack, use Java Reverse method.
            result.add(stack.pop());
        }
        return result;
    }
}
========
Approach II: Java Reverse.

Collections.reverse(result);
